name: CI (Monorepo)

on:
  push: { branches: [main] }
  pull_request: { branches: [main] }
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write

env:
  SONAR_ENABLED: ${{ vars.SONAR_ENABLED || 'false' }}

jobs:
  detect-changes:
    runs-on: self-hosted
    env:
      AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/.runner-toolcache
      RUNNER_TOOL_CACHE:    ${{ github.workspace }}/.runner-toolcache
      RUNNER_TEMP:          ${{ github.workspace }}/.runner-tmp
    outputs:
      api:  ${{ steps.filter.outputs.api }}
      pay:  ${{ steps.filter.outputs.pay }}
      ord:  ${{ steps.filter.outputs.ord }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare runner caches
        run: |
          mkdir -p "$AGENT_TOOLSDIRECTORY" "$RUNNER_TOOL_CACHE" "$RUNNER_TEMP"
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api: ['apps/api-gateway-node/**', 'libs/**']
            pay: ['apps/payments-python/**', 'libs/**']
            ord: ['apps/orders-java/**', 'libs/**']

  api:
    needs: detect-changes
    if: needs.detect-changes.outputs.api == 'true'
    runs-on: self-hosted
    env:
      AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/.runner-toolcache
      RUNNER_TOOL_CACHE:    ${{ github.workspace }}/.runner-toolcache
      RUNNER_TEMP:          ${{ github.workspace }}/.runner-tmp
      IMAGE: ghcr.io/${{ github.repository_owner }}/api-gateway-node
      TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare runner caches
        run: |
          mkdir -p "$AGENT_TOOLSDIRECTORY" "$RUNNER_TOOL_CACHE" "$RUNNER_TEMP"

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install
        working-directory: apps/api-gateway-node
        run: npm install --no-audit --no-fund

      - name: Lint
        working-directory: apps/api-gateway-node
        run: npm run lint

      - name: Test
        working-directory: apps/api-gateway-node
        run: npm test

      - name: Ping SonarQube
        if: env.SONAR_ENABLED == 'true'
        run: curl -fsSL -o /dev/null "${{ vars.SONAR_HOST_URL }}/api/server/version"

      - name: SonarQube Scan
        if: env.SONAR_ENABLED == 'true'
        uses: SonarSource/sonarqube-scan-action@v2.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: apps/api-gateway-node

      - name: SonarQube Quality Gate
        if: env.SONAR_ENABLED == 'true'
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: apps/api-gateway-node/.scannerwork/report-task.txt

      - name: Login GHCR
        if: github.event_name == 'push'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build & Push
        if: github.event_name == 'push'
        run: |
          docker build -t $IMAGE:$TAG apps/api-gateway-node
          docker tag $IMAGE:$TAG $IMAGE:dev
          docker push $IMAGE:$TAG
          docker push $IMAGE:dev

  pay:
    needs: detect-changes
    if: needs.detect-changes.outputs.pay == 'true'
    runs-on: self-hosted
    env:
      AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/.runner-toolcache
      RUNNER_TOOL_CACHE:    ${{ github.workspace }}/.runner-toolcache
      RUNNER_TEMP:          ${{ github.workspace }}/.runner-tmp
      IMAGE: ghcr.io/${{ github.repository_owner }}/payments-python
      TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare runner caches
        run: |
          mkdir -p "$AGENT_TOOLSDIRECTORY" "$RUNNER_TOOL_CACHE" "$RUNNER_TEMP"

      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - run: pip install --no-cache-dir pytest
      - run: pytest -q || true

      - name: Ping SonarQube
        if: env.SONAR_ENABLED == 'true'
        run: curl -fsSL -o /dev/null "${{ vars.SONAR_HOST_URL }}/api/server/version"

      - name: SonarQube Scan
        if: env.SONAR_ENABLED == 'true'
        uses: SonarSource/sonarqube-scan-action@v2.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: apps/payments-python

      - name: SonarQube Quality Gate
        if: env.SONAR_ENABLED == 'true'
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: apps/payments-python/.scannerwork/report-task.txt

      - name: Login GHCR
        if: github.event_name == 'push'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build & Push
        if: github.event_name == 'push'
        run: |
          docker build -t $IMAGE:$TAG apps/payments-python
          docker tag $IMAGE:$TAG $IMAGE:dev
          docker push $IMAGE:$TAG
          docker push $IMAGE:dev

  ord:
    needs: detect-changes
    if: needs.detect-changes.outputs.ord == 'true'
    runs-on: self-hosted
    env:
      AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/.runner-toolcache
      RUNNER_TOOL_CACHE:    ${{ github.workspace }}/.runner-toolcache
      RUNNER_TEMP:          ${{ github.workspace }}/.runner-tmp
      IMAGE: ghcr.io/${{ github.repository_owner }}/orders-java
      TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare runner caches
        run: |
          mkdir -p "$AGENT_TOOLSDIRECTORY" "$RUNNER_TOOL_CACHE" "$RUNNER_TEMP"

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Install Maven from Apache archive (no 404)
      - name: Install Maven
        run: |
          set -euo pipefail
          MAVEN_VERSION=3.9.9
          URL="https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz"
          echo "Downloading Maven from $URL"
          curl -fsSL "$URL" -o maven.tgz
          mkdir -p "$RUNNER_TOOL_CACHE/maven"
          tar -xzf maven.tgz
          mv "apache-maven-${MAVEN_VERSION}" "$RUNNER_TOOL_CACHE/maven/"
          echo "$RUNNER_TOOL_CACHE/maven/apache-maven-${MAVEN_VERSION}/bin" >> "$GITHUB_PATH"
          mvn -v

      - name: Build orders-java
        run: |
          cd apps/orders-java
          mvn -q -DskipTests=true package

      - name: Ping SonarQube
        if: env.SONAR_ENABLED == 'true'
        run: curl -fsSL -o /dev/null "${{ vars.SONAR_HOST_URL }}/api/server/version"

      - name: SonarQube Scan
        if: env.SONAR_ENABLED == 'true'
        uses: SonarSource/sonarqube-scan-action@v2.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: apps/orders-java

      - name: SonarQube Quality Gate
        if: env.SONAR_ENABLED == 'true'
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: apps/orders-java/.scannerwork/report-task.txt

      - name: Login GHCR
        if: github.event_name == 'push'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build & Push
        if: github.event_name == 'push'
        run: |
          docker build -t $IMAGE:$TAG apps/orders-java
          docker tag $IMAGE:$TAG $IMAGE:dev
          docker push $IMAGE:$TAG
          docker push $IMAGE:dev
